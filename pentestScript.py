#!/usr/bin/env python3

import socket
import ipaddress
import nmap

def scan_network(network):
  # Create a PortScanner object
  scanner = nmap.PortScanner()

  # Ask the user for the range of ports to scan
  port_range_input = input("Enter the range of ports to scan (e.g. 1-100): ")
  
  if "/" in port_range_input:
    # The input is for the network, not the port range
    network_input = port_range_input
    network = ipaddress.IPv4Network(network_input)
  else:
    # Split the input string on the - character to get the start and end of the range
    start, end = port_range_input.split("-")

    # Use the range() function to create a list of port numbers in the specified range
    port_numbers = range(int(start), int(end) + 1)

    # Convert the list of port numbers to a string
    port_string = ",".join(str(port) for port in port_numbers)

    # Scan the network for the specified port numbers, including TCP and UDP ports
    tcp_results = scanner.scan(str(network), port_string, arguments="-sS -O --script vuln")
    udp_results = scanner.scan(str(network), port_string, arguments="-sU --script vuln")
  
    # Combine the results of the open port scans
    scan_results = {
          "tcp_open_ports": tcp_results,
          "udp_open_ports": udp_results
        }

    return scan_results

def print_scan_results(scan_results):
  # Iterate over the TCP and UDP scan results
  for protocol, results in scan_results.items():
    print(f"Protocol: {protocol.upper()}")

    # Iterate over the hosts in the network
    for host in results['scan']:
      # Print the IP address of the host
      print(f"  Host: {host}")

      # Check if the results include UDP scan data
      if 'udp' in results['scan'][host]:
        # Print the open UDP ports for the host
        for port in results['scan'][host]['udp']:
          # Print the port number
          print(f"    Port: {port}")

          # Print the name and version of the service running on the port
          service = results['scan'][host]['udp'][port]['name']
          version = results['scan'][host]['udp'][port]['version']
          print(f"    Service: {service} ({version})")

          # Check if the results include vulnerability scan data
          if 'vuln' in results['scan'][host]['udp'][port]:
            # Print the vulnerabilities found
            for vuln in results['scan'][host]['udp'][port]['vuln']:
              print(f"    Vulnerability: {vuln}")
          print("\n")

      # Check if the results include TCP scan data
      if 'tcp' in results['scan'][host]:
        # Print the open TCP ports for the host
        for port in results['scan'][host]['tcp']:
          # Print the port number
          print(f"    Port: {port}")

          # Print the name and version of the service running on the port
          service = results['scan'][host]['tcp'][port]['name']
          version = results['scan'][host]['tcp'][port]['version']
          print(f"    Service: {service} ({version})")

          # Check if the results include vulnerability scan data
          if 'vuln' in results['scan'][host]['tcp'][port]:
            # Print the vulnerabilities found
            for vuln in results['scan'][host]['tcp'][port]['vuln']:
              print(f"    Vulnerability: {vuln}")
          print("\n")
              
      if 'osmatch' in tcp_results['scan'][host]:
        print("Found!")
        for os in tcp_results['scan'][host]['osmatch']:
          print(f"  OS: {os['name']}")
          print(f"  Version: {os['version']}")


def main():
  try:
    # Ask the user for the network to scan
    network_input = input("Enter the network to scan (e.g. 192.168.1.0): ")

    # Parse the input and create an IPv4Network object
    network = ipaddress.IPv4Network(network_input)

    # Scan the network and print the results
    scan_results = scan_network(network)
    print_scan_results(scan_results)

  finally:
    print("Finished scanning the network.")

if __name__ == "__main__":
  main()
