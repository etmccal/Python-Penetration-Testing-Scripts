# Copyright (C) 2022 E.Mc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# This script is provided for educational purposes only.
# The author of this script is not responsible for any damages or losses that may result from the use of this script. 
# Use at your own risk.

#!/usr/bin/env python3

import ipaddress
import nmap
from datetime import datetime

output_file_path = "scan_results.txt"

class Scanner:
    def __init__(self):
        self.nm = nmap.PortScanner()

    def is_valid_ipv4(self, ip):
        try:
            ipaddress.IPv4Address(ip)
            return True
        except ipaddress.AddressValueError:
            return False

    def write_to_file(self, content):
        with open(output_file_path, 'a') as file:
            file.write(f"{datetime.now()} - {content}\n\n")

class BasicScanner(Scanner):
    def run(self):
        target = input("Enter the network to scan (e.g. 192.168.2.0): ")
        if self.is_valid_ipv4(target): 
            self.perform_scan(target)
        else: 
            print("Invalid IP address.")

    def perform_scan(self, target):
        print("Performing Basic Scan...")
        try:
            scan_results = self.nm.scan(hosts=target, arguments="-sS -p- -sV -T2 --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Basic Scan Results for {target}:\n{scan_results}")
            print("Analyzing Basic Scan Results...")
            self.display_results(scan_results)
            print("Basic Scan Completed Successfully!")
        except Exception as e:
            print(f"Error During Basic Scan: {e}")

    def display_results(self, scan_results):
        print("\n---------------------------------------------")
        print("Basic Scan Results")
        print("---------------------------------------------")
        for host, result in scan_results.get('scan', {}).items():
            print(f"Host: {host}")
            print(f"MAC Address: {result.get('addresses', {}).get('mac', 'N/A')}")
            print(f"Vendor: {result.get('vendor', {}).get(result.get('addresses', {}).get('mac', ''), 'N/A')}")
            print(f"Status: {result.get('status', {}).get('state', 'N/A')} (Reason: {result.get('status', {}).get('reason', 'N/A')})\n")
            print("Open Ports and Services:")

            for port, port_info in result.get('tcp', {}).items():
                print(f"  Port: {port}, Service: {port_info.get('name', 'N/A')}, Product: {port_info.get('product', 'N/A')}")
            
        print("\nSummary:")
        print(f"A total of {len(result.get('tcp', {}))} open ports and services were detected on the target host.")
        print("Review the details provided and assess the security posture of the host.")
        print("---------------------------------------------\n")

class AdvancedScanner(Scanner):
    def run(self):
        target = input("Enter the target IP for Advanced Scan (e.g. 192.168.2.1): ")
        if not self.is_valid_ipv4(target): 
            print("Invalid IP address.")
            return
        port_range = input("Enter the range of ports to scan (e.g. 20-80): ")
        if not self.is_valid_port_range(port_range): 
            print("Invalid port range.")
            return
        scan_speed = input("Enter the scan speed (1-5, 1 being the slowest and 5 being the fastest): ")
        if not self.is_valid_scan_speed(scan_speed): 
            print("Invalid scan speed.")
            return
        self.perform_scan(target, port_range, scan_speed)

    def is_valid_port_range(self, port_range):
        try:
            start, end = map(int, port_range.split('-'))
            return 1 <= start <= end <= 65535
        except ValueError:
            return False

    def is_valid_scan_speed(self, scan_speed):
        return scan_speed.isdigit() and 1 <= int(scan_speed) <= 5

    def perform_scan(self, target, port_range, scan_speed):
        print("Performing Advanced Scan...")
        try:
            scan_results = self.nm.scan(hosts=target, ports=port_range, arguments=f"-sS -O -sV -sC -T{scan_speed} --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Advanced Scan Results for {target}:\n{scan_results}")
            print("Analyzing Advanced Scan Results...")
            self.display_results(scan_results)
            print("Advanced Scan Completed Successfully!")
        except Exception as e:
            print(f"Error During Advanced Scan: {e}")

    def display_results(self, scan_results):
        print("Advanced Scan Results:")
        for host, result in scan_results.get('scan', {}).items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print(f"MAC Address: {result.get('addresses', {}).get('mac', 'N/A')}")
            print(f"MAC Vendor: {result.get('vendor', {}).get(result.get('addresses', {}).get('mac', ''), 'N/A')}")
            print(f"Status: {result.get('status', {}).get('state', 'N/A')} (Reason: {result.get('status', {}).get('reason', 'N/A')})")
            
            os_matches = result.get('osmatch', [])
            if os_matches:
                best_match = os_matches[0]
                print(f"Best OS Guess: {best_match.get('name', 'N/A')} (Accuracy: {best_match.get('accuracy', 'N/A')}%)")
                for os_class in best_match.get('osclass', []):
                    print(f"  Type: {os_class.get('type', 'N/A')}, Vendor: {os_class.get('vendor', 'N/A')}, Family: {os_class.get('osfamily', 'N/A')}, Generation: {os_class.get('osgen', 'N/A')}")
                
            print("Open Ports and Services:")
            for port, port_info in result.get('tcp', {}).items():
                print(f"  {port}/{port_info.get('name', 'unknown')} (Reason: {port_info.get('reason', 'N/A')})")
                scripts = port_info.get('script', {})
                for script_name, output in scripts.items():
                    print(f"    {script_name}:")
                    print(f"      {output}")
                    
            print("Additional Details:")
            print(f"  All OS Matches: {', '.join([os.get('name', 'N/A') for os in os_matches])}")
            print(f"  Ports Used: {', '.join([str(portused.get('portid', 'N/A')) for portused in result.get('portused', [])])}")

class DnsEnumerator(Scanner):
    def run(self):
        target = input("Enter the target IP for DNS Enumeration (e.g. 192.168.2.1): ")
        if self.is_valid_ipv4(target): 
            self.perform_scan(target)
        else: 
            print("Invalid IP address.")

    def perform_scan(self, target):
        print("Starting DNS Enum...")
        try:
            scan_results = self.nm.scan(hosts=target, arguments="-sU -p 53 --script=dns-brute -T2 --open --defeat-rst-ratelimit")
            self.write_to_file(f"DNS Enumeration Results for {target}:\n{scan_results}")
            print("Analyzing DNS Enumeration Results...")
            self.display_results(scan_results)
            print("DNS Enumeration Completed Successfully!")
        except Exception as e:
            print(f"Error During DNS Enumeration: {e}")

    def display_results(self, scan_results):
        print("DNS Enumeration Results:")
        for host, result in scan_results.get('scan', {}).items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print("Enumerated DNS Entries:")
            for script_out in result.get('hostscript', []):
                print(f" - {script_out['id']}: {script_out.get('output', 'No details')}")

class TracerouteScanner(Scanner):
    def run(self):
        target = input("Enter the target IP for Traceroute (e.g. 192.168.2.1): ")
        if self.is_valid_ipv4(target): 
            self.perform_scan(target)
        else: 
            print("Invalid IP address.")

    def perform_scan(self, target):
        print("Starting Traceroute...")
        try:
            scan_results = self.nm.scan(hosts=target, arguments="--traceroute -p 80,443 -T2 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Traceroute Results for {target}:\n{scan_results}")
            print("Analyzing Traceroute Results...")
            self.display_results(scan_results)
            print("Traceroute Completed Successfully!")
        except Exception as e:
            print(f"Error During Traceroute: {e}")

    def display_results(self, scan_results):
        print("Traceroute Results:")
        for host, result in scan_results.get('scan', {}).items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print(f"Traceroute: {result.get('trace', {'hops': []})['hops']}")

class AggressiveScanner(Scanner):
    def run(self):
        target = input("Enter the target IP for Aggressive Scan (e.g. 192.168.2.1): ")
        if self.is_valid_ipv4(target): 
            self.perform_scan(target)
        else: 
            print("Invalid IP address.")

    def perform_scan(self, target):
        print("Starting Aggressive Scan...")
        try:
            scan_results = self.nm.scan(hosts=target, arguments="-A -T2 --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Aggressive Scan Results for {target}:\n{scan_results}")
            self.display_results(scan_results)
        except Exception as e:
            print(f"Error: {e}")

    def display_results(self, scan_results):
        print("Aggressive Scan Results:")
        for host, result in scan_results.get('scan', {}).items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print(f"OS Guess: {result.get('osmatch', [{'name': 'N/A'}])[0]['name']}")
            print(f"MAC Address: {result.get('addresses', {}).get('mac', 'N/A')}")
            print(f"MAC Vendor: {result.get('vendor', {}).get(result.get('addresses', {}).get('mac', ''), 'N/A')}")
            print("Open Ports and Services:")
            for port, port_info in result.get('tcp', {}).items():
                print(f"  {port}/{port_info.get('name', 'unknown')} ({port_info.get('product', 'N/A')})")

class VulnerabilityScanner(Scanner):
    def run(self):
        target = input("Enter the target IP for Vulnerability Scan (e.g. 192.168.2.1): ")
        if self.is_valid_ipv4(target): 
            self.perform_scan(target)
        else: 
            print("Invalid IP address.")

    def perform_scan(self, target):
        try:
            scan_results = self.nm.scan(hosts=target, arguments="--script=vuln -sV -T2 --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Vulnerability Scan Results for {target}:\n{scan_results}")
            self.display_results(scan_results)
        except Exception as e:
            print(f"Error: {e}")

    def display_results(self, scan_results):
        print("Vulnerability Scan Results:")
        for host, result in scan_results.get('scan', {}).items():
            print(f"\nHost: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print(f"MAC Address: {result.get('addresses', {}).get('mac', 'N/A')}")
            print(f"MAC Vendor: {result.get('vendor', {}).get(result.get('addresses', {}).get('mac', ''), 'N/A')}")
            print(f"Status: {result.get('status', {}).get('state', 'N/A')} (Reason: {result.get('status', {}).get('reason', 'N/A')})")
            
            print("\nOpen Ports and Services:")
            for port, port_info in result.get('tcp', {}).items():
                print(f"  {port}/{port_info.get('name', 'unknown')} ({port_info.get('product', 'N/A')})")
                scripts = port_info.get('script', {})
                for script_name, output in scripts.items():
                    print(f"    {script_name}:")
                    print(f"      {output}")
                    
            print("\nVulnerabilities Identified:")
            for script_out in result.get('hostscript', []):
                print(f" - {script_out['id']}: {script_out.get('output', 'No details')}")
                
        print("\nSummary:")
        print("This scan has identified potential vulnerabilities in the target. Please review the details provided and take appropriate actions to mitigate the risks identified.")

class Main:
    def run(self):
        while True:
            print('---------------------------------------------')
            print("Welcome to the Reconnaissance Tool")
            print('---------------------------------------------')
            print("1. Basic Scan")
            print("2. Advanced Scan")
            print("3. DNS Enumeration Scan")  # Corrected the scan name here
            print("4. Traceroute Scan")
            print("5. Aggressive Scan")
            print("6. Vulnerability Scan")
            print("7. More...")
            print("8. Exit")
            choice = input("Enter your choice: ")
            if choice == '7': self.run_combined_scan()
            if choice == '8': print("Exiting..."); break
            scanner = {'1': BasicScanner, '2': AdvancedScanner, '3': DnsEnumerator, '4': TracerouteScanner, '5': AggressiveScanner, '6': VulnerabilityScanner}.get(choice, None)
            if scanner: 
                print(f"\nInitializing {scanner.__name__}...")
                scanner().run()
                print(f"{scanner.__name__} Completed!\n")
            else: 
                print("Invalid choice!")

    def run_combined_scan(self):
        print("Select scans to combine:")
        print("1. Basic Scan")
        print("2. Advanced Scan")
        print("3. DNS Enumeration Scan")  # Corrected the scan name here
        print("4. Traceroute Scan")
        print("5. Aggressive Scan")
        print("6. Vulnerability Scan")
        
        selected_scans = input("Enter the numbers of the scans to combine, separated by comma (e.g. 2,6): ").split(',')
        
        scanners = {
            '1': BasicScanner(),
            '2': AdvancedScanner(),
            '3': DnsEnumerator(),
            '4': TracerouteScanner(),
            '5': AggressiveScanner(),
            '6': VulnerabilityScanner()
        }
        
        for scan in selected_scans:
            scanner = scanners.get(scan.strip())
            if scanner:
                print(f"\nInitializing {scanner.__class__.__name__} in combined scan...")
                scanner.run()
                print(f"{scanner.__class__.__name__} in combined scan Completed!\n")
            else:
                print(f"Invalid scan number {scan}. Skipping...")

if __name__ == "__main__":
    Main().run()
