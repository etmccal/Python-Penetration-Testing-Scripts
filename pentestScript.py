# Copyright (C) 2022 E.Mc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# This script is provided for informational purposes only.
# The author of this script is not responsible for any damages or losses that may result from the use of this script. 
# Use at your own risk.

#!/usr/bin/env python3

import ipaddress
import socket
import nmap  # Ensuring nmap library is imported
from datetime import datetime  # Importing the datetime module

# Define the output file path
output_file_path = "scan_results.txt"

class Main:
    def run(self):
        while True:
            print('---------------------------------------------')
            print("Welcome to the Reconnaissance Tool")
            print('---------------------------------------------')
            print("1. Basic Scan")
            print("2. Advanced Scan")
            print("3. DNS Enumeration Scan")
            print("4. Traceroute Scan")
            print("5. Aggressive Scan")
            print("6. Vulnerability Scan")  # Adding new option for Vulnerability Scan
            print("7. More...")
            print("8. Exit")
            choice = input("Enter your choice: ")  # Update prompt to include new option
            
            if choice == '1':
                basic_scanner = BasicScanner()
                basic_scanner.run()
            elif choice == '2':
                advanced_scanner = AdvancedScanner()
                advanced_scanner.run()
            elif choice == '3':
                dns_enumerator = DnsEnumerator()
                dns_enumerator.run()
            elif choice == '4':
                traceroute_scanner = TracerouteScanner()
                traceroute_scanner.run()
            elif choice == '5':
                aggressive_scanner = AggressiveScanner()
                aggressive_scanner.run()
            elif choice == '6':
                vulnerability_scanner = VulnerabilityScanner()
                vulnerability_scanner.run()
            elif choice == '7':
                self.run_combined_scan()
            elif choice == '8':
                print("Exiting the Recon Tool. Goodbye!")
                break
            else:
                print("Invalid choice. Please enter a valid option (1/2/3/4/5/6/7/8).")

    def run_combined_scan(self):
        print("Select scans to combine:")
        print("1. Basic Scan")
        print("2. Advanced Scan")
        print("3. DNS Enumeration Scan")
        print("4. Traceroute Scan")
        print("5. Aggressive Scan")
        print("6. Vulnerability Scan")
        selected_scans = input("Enter the numbers of the scans to combine, separated by comma (e.g. 2,6): ")
        selected_scans = selected_scans.split(',')
        
        scanners = {
            '1': BasicScanner(),
            '2': AdvancedScanner(),
            '3': DnsEnumerator(),
            '4': TracerouteScanner(),
            '5': AggressiveScanner(),
            '6': VulnerabilityScanner()
        }
        
        for scan in selected_scans:
            scanner = scanners.get(scan.strip())
            if scanner:
                try:
                    scanner.run()
                except Exception as e:
                    print(f"Error occurred during {scan}: {e}")
                else:
                    print(f"Invalid scan number {scan}. Skipping...")

class BasicScanner:
    def run(self):
        target = self.get_target()
        if not target:
            print("Invalid target. Exiting Basic Scanner.")
            return
        scan_results = self.perform_scan(target)
        self.display_results(scan_results)
    
    def get_target(self):
        target_input = input("Enter the network to scan (e.g. 192.168.2.0): ")
        if not self.is_valid_ipv4(target_input):
            print("Invalid IP address. Please enter a valid IPv4 address (e.g. 192.168.2.0).")
            return None
        return target_input
    
    def is_valid_ipv4(self, ip):
        try:
            ipaddress.IPv4Address(ip)
            return True
        except ipaddress.AddressValueError:
            return False
    
    def perform_scan(self, target):
        scanner = nmap.PortScanner()
        try:
            scan_results = scanner.scan(hosts=target, arguments="-sS -p- -sV -T2 --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Basic Scan Results for {target}:\n{scan_results}")
        except Exception as e:
            print(f"Error occurred during scanning: {e}")
            return {"error": str(e)}
        
        return scan_results
    
    def write_to_file(self, content):
        with open(output_file_path, 'a') as file:
            file.write(f"{datetime.now()} - {content}\\n")
    
    def display_results(self, scan_results):
        print(f"Basic Scan results for {scan_results['target']}:")
        if scan_results['open_ports']:
            print("Open Ports:")
            for port in scan_results['open_ports']:
                print(f" - {port}")
        else:
            print("No open ports found.")

class AdvancedScanner:
    def run(self):
        preferences = self.get_preferences()
        if not preferences:
            print("Invalid preferences. Exiting Advanced Scanner.")
            return
        scan_results = self.perform_scan(preferences)
        self.display_results(scan_results)
    
    def get_preferences(self):
        target = input("Enter the target IP for Advanced Scan (e.g. 192.168.2.1): ")
        if not self.is_valid_ipv4(target):
            print("Invalid IP address. Please enter a valid IPv4 address (e.g. 192.168.2.1).")
            return None
        port_range = input("Enter the range of ports to scan (e.g. 20-80): ")
        if not self.is_valid_port_range(port_range):
            print("Invalid port range. Please enter a valid range (e.g. 20-80).")
            return None
        scan_speed = input("Enter the scan speed (1-5, 1 being the slowest and 5 being the fastest): ")
        if not self.is_valid_scan_speed(scan_speed):
            print("Invalid scan speed. Please enter a valid speed (1-5).")
            return None
        preferences = {
            "target": target,
            "port_range": port_range,
            "scan_speed": scan_speed
        }
        return preferences
    
    def is_valid_ipv4(self, ip):
        try:
            ipaddress.IPv4Address(ip)
            return True
        except ipaddress.AddressValueError:
            return False
    
    def is_valid_port_range(self, port_range):
        try:
            start, end = map(int, port_range.split('-'))
            return 1 <= start <= end <= 65535
        except ValueError:
            return False
    
    def is_valid_scan_speed(self, scan_speed):
        return scan_speed.isdigit() and 1 <= int(scan_speed) <= 5
    
    def perform_scan(self, preferences):
        target = preferences['target']
        port_range = preferences['port_range']
        scanner = nmap.PortScanner()
        try:
            scan_results = scanner.scan(hosts=target, ports=port_range, arguments="-sS -O -sV -sC -T2 --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Advanced Scan Results for {target}:\n{scan_results}")
        except Exception as e:
            print(f"Error occurred during scanning: {e}")
            return {"error": str(e)}
        return scan_results
    
    def write_to_file(self, content):
        with open(output_file_path, 'a') as file:
            file.write(f"{datetime.now()} - {content}\\n\\n")
    
    def display_results(self, scan_results):
        print("Advanced Scan Results:")
        for host, result in scan_results['scan'].items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print(f"OS: {result.get('osmatch', [{'name': 'N/A'}])[0]['name']}")
            print("Open Ports:")
            for port, port_info in result.get('tcp', {}).items():
                print(f"  {port}/{port_info.get('name', 'unknown')} ({port_info.get('product', 'N/A')})")

class DnsEnumerator:
    def run(self):
        target = input("Enter the target IP for DNS Enumeration (e.g. 192.168.2.1): ")
        if not self.is_valid_ipv4(target):
            print("Invalid IP address. Please enter a valid IPv4 address (e.g. 192.168.2.1).")
            return
        scan_results = self.perform_scan(target)
        self.display_results(scan_results)
    
    def is_valid_ipv4(self, ip):
        try:
            ipaddress.IPv4Address(ip)
            return True
        except ipaddress.AddressValueError:
            return False
    
    def perform_scan(self, target):
        scanner = nmap.PortScanner()
        try:
            scan_results = scanner.scan(hosts=target, arguments="-sU -p 53 --script=dns-brute -T2 --open --defeat-rst-ratelimit")
            self.write_to_file(f"DNS Enumeration Results for {target}:\n{scan_results}")
        except Exception as e:
            print(f"Error occurred during DNS Enumeration: {e}")
            return {"error": str(e)}
        return scan_results
    
    def write_to_file(self, content):
        with open(output_file_path, 'a') as file:
            file.write(f"{datetime.now()} - {content}\\n\\n")
    
    def display_results(self, scan_results):
        print("DNS Enumeration Results:")
        for host, result in scan_results['scan'].items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")

class TracerouteScanner:
    def run(self):
        target = input("Enter the target IP for Traceroute (e.g. 192.168.2.1): ")
        if not self.is_valid_ipv4(target):
            print("Invalid IP address. Please enter a valid IPv4 address (e.g. 192.168.2.1).")
            return
        scan_results = self.perform_scan(target)
        self.display_results(scan_results)
    
    def is_valid_ipv4(self, ip):
        try:
            ipaddress.IPv4Address(ip)
            return True
        except ipaddress.AddressValueError:
            return False
    
    def perform_scan(self, target):
        scanner = nmap.PortScanner()
        try:
            scan_results = scanner.scan(hosts=target, arguments="--traceroute -p 80,443 -T2 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Traceroute Results for {target}:\n{scan_results}")
        except Exception as e:
            print(f"Error occurred during Traceroute: {e}")
            return {"error": str(e)}
        return scan_results
    
    def write_to_file(self, content):
        with open(output_file_path, 'a') as file:
            file.write(f"{datetime.now()} - {content}\\n\\n")
    
    def display_results(self, scan_results):
        print("Traceroute Results:")
        for host, result in scan_results['scan'].items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print(f"Traceroute: {result.get('trace', {'hops': []})['hops']}")

class AggressiveScanner:
    def run(self):
        target = input("Enter the target IP for Aggressive Scan (e.g. 192.168.2.1): ")
        if not self.is_valid_ipv4(target):
            print("Invalid IP address. Please enter a valid IPv4 address (e.g. 192.168.2.1).")
            return
        scan_results = self.perform_scan(target)
        self.display_results(scan_results)
    
    def is_valid_ipv4(self, ip):
        try:
            ipaddress.IPv4Address(ip)
            return True
        except ipaddress.AddressValueError:
            return False
    
    def perform_scan(self, target):
        scanner = nmap.PortScanner()
        try:
            scan_results = scanner.scan(hosts=target, arguments="-A -T2 --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Aggressive Scan Results for {target}:\n{scan_results}")
        except Exception as e:
            print(f"Error occurred during Aggressive Scan: {e}")
            return {"error": str(e)}
        return scan_results
    
    def write_to_file(self, content):
        with open(output_file_path, 'a') as file:
            file.write(f"{datetime.now()} - {content}\\n\\n")
    
    def display_results(self, scan_results):
        print("Aggressive Scan Results:")
        for host, result in scan_results['scan'].items():
            print(f"Host: {host}")
            print(f"Hostname: {result.get('hostnames', [{'name': 'N/A'}])[0]['name']}")
            print(f"OS: {result.get('osmatch', [{'name': 'N/A'}])[0]['name']}")
            print("Open Ports:")
            for port, port_info in result.get('tcp', {}).items():
                print(f"  {port}/{port_info.get('name', 'unknown')} ({port_info.get('product', 'N/A')})")

class VulnerabilityScanner:
    def run(self):
        target = input("Enter the target IP for Vulnerability Scan (e.g. 192.168.2.1): ")
        if not self.is_valid_ipv4(target):
            print("Invalid IP address. Please enter a valid IPv4 address (e.g. 192.168.2.1).")
            return
        scan_results = self.perform_scan(target)
        self.display_results(scan_results)
    
    def is_valid_ipv4(self, ip):
        try:
            ipaddress.IPv4Address(ip)
            return True
        except ipaddress.AddressValueError:
            return False
    
    def perform_scan(self, target):
        scanner = nmap.PortScanner()
        try:
            scan_results = scanner.scan(hosts=target, arguments="--script=vuln -sV -T2 --version-intensity 0 --open --defeat-rst-ratelimit")
            self.write_to_file(f"Vulnerability Scan Results for {target}:\n{scan_results}")
        except Exception as e:
            print(f"Error occurred during Vulnerability Scan: {e}")
            return {"error": str(e)}
        return scan_results
    
    def write_to_file(self, content):
        with open(output_file_path, 'a') as file:
            file.write(f"{datetime.now()} - {content}\n\n")
    
    def display_results(self, scan_results):
        print("Vulnerability Scan Results:")
        if 'error' in scan_results:
            print(f"Error: {scan_results['error']}")
            return
        for host, result in scan_results.get('scan', {}).items():
            print(f"Host: {host}")
            print("Vulnerabilities:")
            # Extracting and displaying vulnerability information
            # This might need more refinement based on actual output structure
            for script_out in result.get('hostscript', []):
                print(f" - {script_out['id']}: {script_out.get('output', 'No details')}")

if __name__ == "__main__":
    main_instance = Main()
    main_instance.run()
